2.19 Warm up: Variables, input, and casting (Java)
Instructor note:
While you will be submitting this assignment through Zybooks, make sure you are still applying appropriate formatting and 
in-line commenting.

(1) Prompt the user to input an integer, a double, a character, and a string, storing each into separate variables. 
Then, output those four values on a single line separated by a space. (Submit for 2 points).

Enter integer: 99
Enter double: 3.77
Enter character: z
Enter string: Howdy
99 3.77 z Howdy

(2) Extend to also output in reverse. (Submit for 1 point, so 3 points total).

Enter integer: 99
Enter double: 3.77
Enter character: z
Enter string: Howdy
99 3.77 z Howdy
Howdy z 3.77 99

(3) Extend to cast the double to an integer, and output that integer. (Submit for 2 points, so 5 points total).

Enter integer: 99
Enter double: 3.77
Enter character: z
Enter string: Howdy
99 3.77 z Howdy
Howdy z 3.77 99
3.77 cast to an integer is 3

import java.util.Scanner;

public class BasicInput {
   public static void main(String[] args) {
      Scanner scnr = new Scanner(System.in);
      int userInt = 0;
      double userDouble = 0.0;
      // FIXME Define char and string variables similarly
      char userChar;
      String userString;
      System.out.println("Enter integer: ");
      userInt = scnr.nextInt();
      System.out.println("Enter double: ");
      userDouble = scnr.nextDouble();
      System.out.println("Enter character: ");
      userChar = scnr.next().trim().charAt(0);
      System.out.println("Enter string: ");
      scnr.nextLine();
      userString = scnr.nextLine();
      System.out.println(userInt + " " + userDouble + " " + userChar + " " + userString);
      System.out.println(userString + " " + userChar + " " + userDouble + " " + userInt);
      System.out.println(userDouble + " " + "cast to an integer is " + (int) userDouble);
      return;
   }
}
*******************************************************************************************************************
2.20 Debugging: Painting a wall (Java)
Instructor note:
While you will be submitting this assignment through Zybooks, make sure you are still applying appropriate formatting 
and in-line commenting.

Download the PaintEstimator.java file from Brightspace. This program has five (5) errors in it that require you to debug it. 
Watch the video on Using the Netbeans Debugger in the Building on the Basics section of Module 2, then use your 
IDE to debug and fix this program. As you find an error, be sure to document what you changed using in-code commenting. 
Upload the file here to be checked. Below is an explanation of how the program should work.


(1) Prompt the user to input a wall's height and width. Calculate and output the wall's area. (Submit for 2 points).

Enter wall height (feet): 12
Enter wall width (feet): 15
Wall area: 180.0 square feet

(2) Extend to also calculate and output the amount of paint in gallons needed to paint the wall. Assume a gallon of 
paint covers 350 square feet. Store this value using a const double variable. (Submit for 1 points, so 3 points total).

Enter wall height (feet): 12
Enter wall width (feet): 15
Wall area: 180.0 square feet
Paint needed: 0.5142857142857142 gallons

(3) Extend to also calculate and output the number of 1 gallon cans needed to paint the wall. Hint: Use a math function 
to round up to the nearest gallon. (Submit for 2 points, so 5 points total).

Enter wall height (feet): 12
Enter wall width (feet): 15
Wall area: 180.0 square feet
Paint needed: 0.5142857142857142 gallons
Cans needed: 1 can(s)


import java.util.Scanner;

import java.lang.Math;     // Note: Needed for math functions in part (3)

public class PaintEstimator {

    public static void main(String[] args) {

        Scanner scnr = new Scanner(System.in);

        double wallHeight = 0.0;

        double wallWidth = 0.0;

        double wallArea = 0.0;

        double paintNeeded = 0.0;
        double oneGallonCovers = 350;

        System.out.println("Enter wall height (feet): ");

        wallHeight = scnr.nextDouble();

        wallWidth = 10.0;
// FIXME (1): Prompt user to input wall's width

        System.out.println("Enter wall width (feet): ");

        wallWidth = scnr.nextDouble();

// Calculate and output wall area
        wallArea = wallWidth * wallHeight;
// FIXME (1): Calculate the wall's area

        System.out.println("Wall area: " + wallArea + " square feet");
// FIXME (1): Finish the output statement

// FIXME (2): Calculate and output the amount of paint in gallons needed to paint the wall   
        paintNeeded = wallArea/oneGallonCovers;
        System.out.println("Paint needed: " + paintNeeded + " gallons");
// FIXME (3): Calculate and output the number of 1 gallon cans needed to paint the wall, rounded up to nearest integer

        System.out.println("Cans needed: " + Math.round(paintNeeded) + " can(s)");
        }
}
****************************************************************************************************************************
3.14 Warm up: Text message abbreviation decoder (Java)
(1) If a user's input string matches a known text message abbreviation, output the unabbreviated form, else output: 
Unknown. Support two abbreviations: LOL -- laughing out loud, and IDK -- I don't know. (3 pts) 

Sample input/output:

Input an abbreviation: LOL
laughing out loud

(2) Expand to also decode these abbreviations. (4 pts)

BFF -- best friends forever
IMHO -- in my humble opinion
TMI -- too much information

import java.util.Scanner;

public class TextMsgAbbreviation {
   public static void main(String[] args) {
      Scanner sc = new Scanner(System.in);
      System.out.println("Input an abbreviation: ");
      String s = sc.nextLine();
      
      switch(s)
      {
         case "LOL":
            System.out.println("laughing out loud");
            break;
         case "IDK":
            System.out.println("I don't know");
            break;
         case "BFF":
            System.out.println("best friends forever");
            break;
         case "IMHO":
            System.out.println("in my humble opinion");
            break;
         case "TMI":
            System.out.println("too much information");
            break;
         default:
            System.out.println("Unknown");
            break;
      }
      
      return;
   }
}
****************************************************************************************************************************
3.15 Program: Text message expander (Java)
Instructor note:
While you will be submitting this assignment through Zybooks, make sure you are still applying appropriate 
formatting and in-line commenting.

Create a program using conditional logic and string operations that does the following using your NetBeans IDE and upload it here: 

(1) Use scnr.nextLine(); to get a line of user input into a string. Output that line. (1 pt) 

Ex:

Enter text: IDK how that happened. TTYL. 
You entered: IDK how that happened. TTYL.

(2) Expand common text message abbreviations. Output a message for each abbreviation that is expanded, then 
output the expanded line. Note: Check for abbreviations in the order provided below. (5 pts)

Support these abbreviations (you only need to support these):

BFF -- best friend forever
IDK -- I don't know
JK -- just kidding
TMI -- too much information
TTYL -- talk to you later 
Ex:

Enter text: IDK how that happened. TTYL. 
You entered: IDK how that happened. TTYL.

Replaced "IDK" with "I don't know".
Replaced "TTYL" with "talk to you later".

Expanded: I don't know how that happened. talk to you later.

import java.util.Scanner;
public class TextMsgExpander
{
    public static void main(String[] args)
    {
        new TextMsgExpander().execute();
    }
    public void execute()
    {
        System.out.println("Enter text: ");
        Scanner scnr = new Scanner(System.in);
        String inString = scnr.nextLine();

        System.out.print("You entered: ");
        System.out.println(inString);

        String str_msg = define_msg(inString);
        System.out.println();

        if(inString.contains("BFF"))
        System.out.println("Replaced \"BFF\" "
        + "with \"best friend forever\".");

        if(inString.contains("IDK"))
        System.out.println("Replaced \"IDK\""
        + " with \"I don't know\".");

        if(inString.contains("JK"))
        System.out.println("Replaced \"JK\""
        + " with \"just kidding\".");

        if(inString.contains("TMI"))
        System.out.println("Replaced \"TMI\""
        + " with \"too much information\".");

        if(inString.contains("TTYL"))
        System.out.println("Replaced \"TTYL\""
        + " with \"talk to you later\".");
        System.out.println();
        System.out.println("Expanded: " + str_msg);
    }
    public String define_msg(String str_msg)
    {
        String String = str_msg;

        String = String.replace("BFF", "best "
        + "friend forever");
        String = String.replace("IDK", "I don't know");
        String = String.replace("JK", "just kidding");
        String = String.replace("TMI", "too much"
        + " information");
        String = String.replace("TTYL", "talk to"
        + " you later");

        return String;
    }
}
****************************************************************************************************************************
5.6 Warm up: Parsing strings (Java)
(1) Prompt the user for a string that contains two strings separated by a comma. (1 pt)

Examples of strings that can be accepted:
Jill, Allen
Jill , Allen
Jill,Allen 
Ex:

Enter input string: Jill, Allen

(2) Report an error if the input string does not contain a comma. Continue to prompt until a valid string is entered. 
Note: If the input contains a comma, then assume that the input also contains two strings. (2 pts) 

Ex:

Enter input string: Jill Allen
Error: No comma in string
Enter input string: Jill, Allen

(3) Extract the two words from the input string and remove any spaces. Store the strings in two separate variables and 
output the strings. (2 pts) 

Ex:

Enter input string: Jill, Allen
First word: Jill
Second word: Allen

(4) Using a loop, extend the program to handle multiple lines of input. Continue until the user enters q to quit. (2 pts) 

Ex:

Enter input string: Jill, Allen
First word: Jill
Second word: Allen


Enter input string: Golden , Monkey
First word: Golden
Second word: Monkey


Enter input string: Washington,DC
First word: Washington
Second word: DC


Enter input string: q

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ParseStrings
{
      public static void main(String[] args) throws IOException {
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            while (true)
            {
                  System.out.println("Enter input string: ");
                  String input = br.readLine();
                  if(input.equalsIgnoreCase("q"))
                        break;
                  if(input.indexOf(",") == -1)
                  {
                        System.out.println("Error: No comma in string");
                        continue;
                  }
                  String[] words = input.split(",");
                  String firstWord = words[0].trim();
                  String secondWord = words[1].trim();
                  System.out.println("First word: "+firstWord);
                  System.out.println("Second word: "+secondWord);
                  System.out.println("\n");
            }
      }
}
*****************************************************************************************************************************
7.5 Warm up: People's weights (Java)
Instructor note:
While you will be submitting this assignment through Zybooks, make sure you are still applying appropriate formatting 
and in-line commenting.

(1) Prompt the user to enter five numbers, being five people's weights. Store the numbers in an array of doubles. 
Output the array's numbers on one line, each number followed by one space. (2 pts) 

Ex:

Enter weight 1: 236
Enter weight 2: 89.5
Enter weight 3: 142
Enter weight 4: 166.3
Enter weight 5: 93

You entered: 236.0 89.5 142.0 166.3 93.0
(2) Also output the total weight, by summing the array's elements. (1 pt)

(3) Also output the average of the array's elements. (1 pt)

(4) Also output the max array element. (2 pts) 


Ex:

Enter weight 1: 236
Enter weight 2: 89.5
Enter weight 3: 142
Enter weight 4: 166.3
Enter weight 5: 93

You entered: 236.0 89.5 142.0 166.3 93.0
Total weight: 726.8
Average weight: 145.35999999999999
Max weight: 236.0

import java.util.Scanner;

public class PeopleWeights {
   public static void main(String[] args) {
       double[] weights = new double[5];
       int i;
       double total = 0, average, max = 0;
      
       Scanner sc = new Scanner(System.in);
       for(i=0; i<5; i++)
       {
           System.out.println("Enter weight " + (i+1) + ": ");

           weights[i] = sc.nextDouble();
       }  
       System.out.print("\n");
       System.out.print("You entered: ");
       for(i=0; i<5; i++)
       {
           System.out.print(weights[i] + " ");

           total += weights[i];

           if(weights[i] > max)
               max = weights[i];
       }

       System.out.print("\nTotal weight: " + total);
      
       double avg = total/5.0;

       System.out.println("\nAverage weight: " + avg);

       System.out.println("Max weight: " + max );
      
      return;
   }
}
